{"version":3,"sources":["components/navBar.js","components/Slider.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","title","className","href","Slider","props","id","type","checked","viewDate","onChange","toggleDate","App","setState","prevState","state","displayTime","displayDate","setInterval","time","Date","hh","getHours","mm","getMinutes","ss","getSeconds","ampm","DAY","getDay","DD","getDate","MM","getMonth","YY","getFullYear","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wTAiBiBA,MAbjB,YAA0B,IAATC,EAAQ,EAARA,MACb,OACI,yBAAKC,UAAU,qCACf,yBAAKA,UAAU,aACX,yBAAKA,UAAU,cACX,uBAAGA,UAAU,wCACb,yBAAKA,UAAU,6BAA6BC,KAAK,KAAjD,IAAuDF,EAAvD,SCUDG,G,MAhBA,SAACC,GACZ,OACI,yBAAKH,UAAU,mBACX,yBAAKA,UAAU,oBACX,yBAAKA,UAAU,SACX,wBAAIA,UAAU,eAAd,QACA,2BAAOI,GAAG,cAAcJ,UAAU,UAC9B,2BAAOK,KAAK,WAAWC,QAASH,EAAMI,SAAUC,SAAWL,EAAMM,aACjE,0BAAMT,UAAU,uBCkEzBU,G,8DArEb,aAAe,IAAD,8BACZ,gBA6CJD,WAAa,WACX,EAAKE,UAAS,SAAAC,GACV,MAAO,CACHL,UAAWK,EAAUL,cA/C3B,EAAKM,MAAQ,CACTd,MAAO,cACPQ,UAAU,EACVO,YAAa,GACbC,YAAa,IAGjBC,aAAY,WACR,IAAMC,EAAK,IAAIC,KACXC,EAAGF,EAAKG,WACRC,EAAGJ,EAAKK,aACRC,EAAGN,EAAKO,aAERC,EAAKN,GAAI,GAAG,KAAK,KAGrBE,EAAGA,EAAG,GAAG,IAAIA,EAAGA,EAChBE,EAAGA,EAAG,GAAG,IAAIA,EAAGA,EAChBJ,EAAQ,QAHRA,GADAA,EAAGA,EAAG,GAAGA,EAAG,GAAGA,GACT,GAAG,IAAIA,EAAGA,GAGH,KAAKA,EAElB,EAAKR,SAAS,CACVG,YAAaS,EAAG,IAAI,EAAEJ,EAAG,IAAIE,EAAG,IAAIE,EAAG,IAAIE,EAAKN,EAAG,IAAIE,EAAG,IAAIE,EAAG,IAAIE,IAGzE,IAAIC,EAAIT,EAAKU,SACTC,EAAGX,EAAKY,UACZD,EAAGA,EAAG,GAAG,IAAIA,EAAGA,EAChB,IAAIE,EAAGb,EAAKc,WACRC,EAAGf,EAAKgB,cAUZ,EAAKtB,SAAS,CACZI,YALS,CACT,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,OAIlBW,GAAO,IAVd,CACX,UAAU,WAAW,QAAQ,QAC7B,MAAM,OAAO,OAAO,SACpB,YAAY,UAAU,WAAW,YAOKI,GAAM,IAAMF,EAAK,KAAOI,MAEjE,KA3CS,E,qDAwDZ,OACE,yBAAKhC,UAAU,OACb,kBAAC,EAAD,CAAQD,MAAOmC,KAAKrB,MAAMd,QAC1B,kBAAC,EAAD,CAAQQ,SAAU2B,KAAKrB,MAAMN,SAAUE,WAAYyB,KAAKzB,aACxD,0BAAMT,UAAU,qBACd,wBAAIA,UAAU,gBAAd,IAA+BkC,KAAKrB,MAAMC,YAA1C,KACA,wBAAId,UAAU,gBAAd,IAA+BkC,KAAKrB,MAAMN,UAAY2B,KAAKrB,MAAME,YAAjE,W,GAhEQoB,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.449ba012.chunk.js","sourcesContent":["import React from 'react';\n\nimport './navBar.css';\n\nfunction NavBar({title}) {\n    return (\n        <nav className=\"header navbar navbar-dark bg-dark\">\n        <div className=\"container\">\n            <div className=\"row m-auto\">\n                <i className=\"fa fa-film fa-2x text-white my-auto\"></i>\n                <div className=\"h3 ml-3 my-auto text-light\" href=\"/\"> {title} </div>\n            </div>\n        </div>\n    </nav>\n    );\n  }\n  \n  export default NavBar;","import React from 'react';\n\nimport './Slider.css';\n\nconst Slider = (props) => {\n    return ( \n        <div className=\"d-flex flex-row\">\n            <div className=\"col-md-4 mx-auto\">\n                <div className=\"panel\">  \n                    <h1 className=\"toggle-text\">Date</h1>\n                    <label id=\"date-switch\" className=\"switch\">\n                        <input type=\"checkbox\" checked={props.viewDate} onChange= {props.toggleDate} />\n                        <span className=\"slider round\"></span>\n                    </label>\n                </div>\n            </div>\n        </div>\n     );\n}\n \nexport default Slider;","import React, { Component } from 'react';\nimport NavBar from './components/navBar';\nimport Slider from './components/Slider';\n\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\n\nclass App extends Component {\n\n  constructor() {\n    super()\n    this.state = {\n        title: \"React Clock\",\n        viewDate: false,\n        displayTime: \"\",\n        displayDate: \"\",\n    }\n\n    setInterval(()=>{\n        const time=new Date();\n        var hh=time.getHours();\n        var mm=time.getMinutes();\n        var ss=time.getSeconds();\n\n        var ampm=hh>=12?\"PM\":\"AM\";\n        hh=hh>12?hh-12:hh;\n        hh=hh<10?'0'+hh:hh;\n        mm=mm<10?'0'+mm:mm;\n        ss=ss<10?'0'+ss:ss;\n        hh=hh===\"00\"?\"12\":hh;\n\n        this.setState({\n            displayTime: ss%2===0?hh+\":\"+mm+\":\"+ss+\" \"+ampm:hh+\" \"+mm+\" \"+ss+\" \"+ampm\n        });\n\n        let DAY=time.getDay();\n        let DD=time.getDate();\n        DD=DD<10?\"0\"+DD:DD;\n        let MM=time.getMonth();\n        let YY=time.getFullYear();\n        let Months = [\n          \"January\",\"February\",\"March\",\"April\",\n          \"May\",\"June\",\"July\",\"August\",\n          \"September\",\"October\",\"November\",\"December\"\n        ];\n        let Days = [\n          \"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"\n        ];\n\n        this.setState({\n          displayDate: Days[DAY] + \" \" + Months[MM] + \" \" + DD + \", \" + YY\n        });\n    }, 1000);\n}\n\ntoggleDate = () => {\n  this.setState(prevState => {\n      return {\n          viewDate: !prevState.viewDate\n      }\n  });\n}\n  // Done\n  \n  render() { \n    return ( \n      <div className=\"App\">\n        <NavBar title={this.state.title} />\n        <Slider viewDate={this.state.viewDate} toggleDate={this.toggleDate} />\n        <main className=\"container display\">\n          <h1 className=\"display-time\"> {this.state.displayTime} </h1>\n          <h3 className=\"display-date\"> {this.state.viewDate && this.state.displayDate} </h3>\n        </main>\n      </div>\n     );\n  }\n}\n \nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}